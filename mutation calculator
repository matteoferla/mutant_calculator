<!DOCTYPE html>
<html>
<head lang="en">
    <meta charset="UTF-8">
    <title></title>
</head>
<body>
Error prone PCR is a method to create a pool of amplicons with some random errors. This calculator deals with mutational
biases, not the frequencies of mutations —for that see <a href="http://guinevere.otago.ac.nz/mlrgd/STATS/">Pedel</a>.
Additionally this calculator has an experimental feature in that an attempt is done to estimate the error in the values.
This is not done in supplier's manuals as the values are very inaccurate due to the small sample size. The errors are
calculated using the assumption that a mutation and its complementary are equally likely in light of the double helix
nature of DNA (<i>e.g.</i> A to G on one strand will result in T to C on the other). For the more complex indicators two
equations were used. First, the Binaymé rule states that the variance of a sum of averages is the sum of the variances
of the averages. Second, the variance of a ratio of two averages can be calculated with a first-order Taylor expansion:
the sum of (the variance of the denominator over the square of the average of the numerator) plus (the square of the
average of the denominator times the variance of the numerator divided by the forth-power of the average of the
numerator) plus zero (assuming no covariance), all divided by the sample size. <br/>

<style>
    table, th, td {
        border: 1px solid lightgrey;
        border-collapse: collapse;
    }
</style>

<br/>
Sequence amplified by mutagenic PCR (all symbols that aren't ATGC, will be discarded):
<br/>
<textarea id="sequence" rows="10" cols="50">
GATACA
</textarea>

<br/>
Mutations found. The format is each line is a variant sampled. Each line has one or more mutations (in the form: IUPAC
one-letter nucleobase of original + position (irrelevant) + mutant nucleobase, <i>e.g.</i> A67T) and when there are more
than one mutation per variant a space should separate them. A wild type sequence can be indicated with 'wt' or 'WT', it
is not needed for the main calculations and it is used solely for the mean mutations (useful for Pedel).
<br/>
<textarea id="mutlist" rows="10" cols="20">
A56C T19G
T19G
WT
</textarea>
<br/>
<button onclick="precalcula()">Calculate mutation frequency</button>
<br/><br/>
Simple average for the mean number of point mutations per sequence (<i>m</i>): <span id="mutfreq">N/A</span>
(the variance (=<span id="mutvar">N/A</span>) should be similar, if not consider fitting the distribution of mutations
to a PCR distribution or a Poisson distribution)
<br/>
<br/>
      To A       To T       To G      To C
<br/>
From A
<input disabled="" id="A2A" type="text" value="—"/>
<input id="A2T" type="text" value="0"/>
<input id="A2G" type="text" value="0"/>
<input id="A2C" type="text" value="0"/>
<br/>
From T 
<input id="T2A" type="text" value="0"/>
<input disabled="" id="T2T" type="text" value="—"/>
<input id="T2G" type="text" value="0"/>
<input id="T2C" type="text" value="0"/>
<br/>
From G
<input id="G2A" type="text" value="0"/>
<input id="G2T" type="text" value="0"/>
<input disabled="" id="G2G" type="text" value="—"/>
<input id="G2C" type="text" value="0"/>
<br/>
From C
<input id="C2A" type="text" value="0"/>
<input id="C2T" type="text" value="0"/>
<input id="C2G" type="text" value="0"/>
<input disabled="" id="C2C" type="text" value="—"/>
<br/>
<br/>
Proportion of Adenine:
<input id="sumA" type="text" value="25"/>%
<br/>
Fraction Thymine:
<input id="sumT" type="text" value="25"/>%
<br/>
Fraction Guanine:
<input id="sumG" type="text" value="25"/>%
<br/>
Fraction Cytosine:
<input id="sumC" type="text" value="25"/>%
<br/>
<!--Sequence input? <textarea rows="4" cols="50">xxx</textarea>
-->
<!-- BUTTON-->
<br/>
<button onclick="vide()">Demo values</button>
<button onclick="ablue()">Reset</button>
<button onclick="calcula()">Calculate</button>

<br/>
<!-- OUTPUT-->Sequence-composition–corrected incidence of mutations (%):
<br/>
<table id="compNor">
    <tbody>
    <tr>
        <th>From/To</th>
        <th>A</th>
        <th>T</th>
        <th>G</th>
        <th>C</th>
    </tr>
    <tr>
        <td>A</td>
        <td>  </td>
        <td>  </td>
        <td>  </td>
        <td>  </td>
    </tr>
    <tr>
        <td>T</td>
        <td>  </td>
        <td>  </td>
        <td>  </td>
        <td>  </td>
    </tr>
    <tr>
        <td>G</td>
        <td>  </td>
        <td>  </td>
        <td>  </td>
        <td>  </td>
    </tr>
    <tr>
        <td>C</td>
        <td>  </td>
        <td>  </td>
        <td>  </td>
        <td>  </td>
    </tr>
    </tbody>
</table>
<br/>
<!-- REAL OUTPUT-->Statistics:
<br/>
<table id="fancy">
    <tbody>
    <tr>
        <th>Indicator</th>
        <th>Calculated</th>
        <th>Estimated error</th>
    </tr>
    <tr>
        <td>Ts/Tv</td>
        <td></td>
        <td></td>
    </tr>
    <tr>
        <td>AT→GC/GC→AT</td>
        <td></td>
        <td></td>
    </tr>
    <tr>
        <td>A→N, T→N</td>
        <td></td>
        <td></td>
    </tr>
    <tr>
        <td>G→N,C→N</td>
        <td></td>
        <td></td>
    </tr>
    <tr>
        <td>AT→GC</td>
        <td></td>
        <td></td>
    </tr>
    <tr>
        <td>GC→AT</td>
        <td></td>
        <td></td>
    </tr>
    <tr>
        <td>Transitions (%) total

        </td>
        <td></td>
        <td></td>
    </tr>
    <tr>
        <td>&nbsp;·&nbsp;A→G, T→C</td>
        <td></td>
        <td></td>
    </tr>
    <tr>
        <td>&nbsp;·&nbsp;G→A, C→T</td>
        <td></td>
        <td></td>
    </tr>
    <tr>
        <td>transversions (%) Total

        </td>
        <td></td>
        <td></td>
    </tr>
    <tr>
        <td>&nbsp;·&nbsp;A→T, T→A</td>
        <td></td>
        <td></td>
    </tr>
    <tr>
        <td>&nbsp;·&nbsp;A→C, T→G</td>
        <td></td>
        <td></td>
    </tr>
    <tr>
        <td>&nbsp;·&nbsp;G→C, C→G</td>
        <td></td>
        <td></td>
    </tr>
    <tr>
        <td>&nbsp;·&nbsp;G→T, C→A</td>
        <td></td>
        <td></td>
    </tr>
    </tbody>
</table>
<br/>
<!-- JS FUNCTION -->
<script>
    //Not the nicest way, but it's handy
    var A = 0;
    var T = 1;
    var G = 2;
    var C = 3;

    //avg and stdev fnxs copied off web.

    function variance(values) {
        var avg = average(values);
        var squareDiffs = values.map(function (value) {
            var diff = value - avg;
            return diff * diff;
        });
        return average(squareDiffs);
    }

    function average(data) {
        var sum = data.reduce(function (sum, value) {
            return sum + value;
        }, 0);
        return sum / data.length;
    }

    function rd(x) {
        return Math.round(x * 10) / 10;
    }

    function transSum(m, x, y, w, z) {
        var s = m[x][y] + m[w][z];
        var v = variance([m[x][y], m[w][z]]);
        var d = Math.sqrt(v / 2);
        return [s, d, v];
    }

    function varRatio(mx, vx, my, vy, n) {
        var mxsq = Math.pow(mx, 2);
        var mysq = Math.pow(my, 2);
        var mxqd = Math.pow(mx, 4);
        return Math.abs(vy / mxsq + mysq * vx / mxqd) / n; //covariance set to 0.
    }

    function qV(m, x, y) {
        return variance([m[x][y], m[y][x]]);
    }

    function precalcula() {
        ablue();
        //parse sequence
        var seq = document.getElementById("sequence").value.replace(/[^ATGC]/g, '').split('');
        var freq = {'A': 0, 'C': 0, 'G': 0, 'T': 0};
        var bases = ['A', 'C', 'G', 'T'];
        for (var x = 0; x < seq.length; x++) {
            freq[seq[x]]++;
        }
        for (var x = 0; x < 4; x++) {
            document.getElementById("sum" + bases[x]).value = Math.round(freq[bases[x]] / seq.length * 1000) / 10;
        }
        //parse mutants
        var tally = [];
        var raw_list = document.getElementById("mutlist").value.split(/\r\n|\r|\n/g);
        for (var i = 0; i < raw_list.length; i++) {
            if (!raw_list[i].match(/\w/)) {
                continue;
            }
            var variant = raw_list[i].split(/\W/g);
            if ((variant[0] == 'WT') || (variant[0] == 'wt')) {
                tally[i] = 0;
                continue;
            }
            tally[i] = variant.length;
            for (var j = 0; j < variant.length; j++) {
                document.getElementById(variant[j].substr(0, 1) + "2" + variant[j].substr(-1, 1)).value++;
            }
        }
        document.getElementById('mutfreq').innerHTML = Math.round(average(tally) * 10) / 10;
        document.getElementById('mutvar').innerHTML = Math.round(variance(tally) * 10) / 10;
    }

    function ablue() {
        var bases = ['A', 'T', 'G', 'C'];
        for (var x = 0; x < bases.length; x++) {
            for (var y = 0; y < bases.length; y++) {
                if (x == y) {
                    continue;
                }
                document.getElementById(bases[x] + "2" + bases[y]).value = 0;
            }
            document.getElementById("sum" + bases[x]).value = 25;
        }

    }

    function vide() {
        document.getElementById("A2T").value = 0;
        document.getElementById("A2C").value = 2;
        document.getElementById("A2G").value = 10;
        document.getElementById("T2A").value = 2;
        document.getElementById("T2G").value = 0;
        document.getElementById("T2C").value = 2;
        document.getElementById("G2A").value = 2;
        document.getElementById("G2T").value = 2;
        document.getElementById("G2C").value = 1;
        document.getElementById("C2A").value = 2;
        document.getElementById("C2T").value = 8;
        document.getElementById("C2G").value = 0;
        document.getElementById("sumA").value = 30;
        document.getElementById("sumT").value = 21;
        document.getElementById("sumG").value = 26;
        document.getElementById("sumC").value = 23;
    }

    function calcula() {

        //Get data
        var Amuts = [0, document.getElementById("A2T").value, document.getElementById("A2G").value, document.getElementById("A2C").value];
        var Tmuts = [document.getElementById("T2A").value, 0, document.getElementById("T2G").value, document.getElementById("T2C").value];
        var Gmuts = [document.getElementById("G2A").value, document.getElementById("G2T").value, 0, document.getElementById("G2C").value];
        var Cmuts = [document.getElementById("C2A").value, document.getElementById("C2T").value, document.getElementById("C2G").value, 0];
        var muts = [Amuts, Tmuts, Gmuts, Cmuts];
        var dis = [document.getElementById("sumA").value, document.getElementById("sumT").value, document.getElementById("sumG").value, document.getElementById("sumC").value];

        //Normalise
        var summa = 0;
        for (i = 0; i < 4; i++) {
            for (j = 0; j < 4; j++) {
                muts[i][j] /= dis[i];
                summa += muts[i][j];
            }
        }
        summa /= 100; // /100 --> %
        for (i = 0; i < 4; i++) {
            for (j = 0; j < 4; j++) {
                muts[i][j] /= summa;
                document.getElementById("compNor").rows[i + 1].cells[j + 1].innerHTML = rd(muts[i][j]);
            }
        }

        //Canculate fancy table

        //A>G + T>C
        var ts1 = transSum(muts, A, G, T, C);

        //G>A + C>T
        var ts2 = transSum(muts, G, A, C, T);

        //Ts total
        var tsT = [];
        tsT[0] = ts1[0] + ts2[0];
        tsT[2] = ts1[2] + ts2[2]; //Biename for variance.
        tsT[1] = Math.sqrt(tsT[2] / 2); // n =2

        //A>T + T>A
        var tvW = transSum(muts, A, T, T, A);

        //A→C, T→G
        var tvN1 = transSum(muts, A, C, T, G);

        // G→C, C→G
        var tvS = transSum(muts, G, C, C, G);

        // G→T, C→A
        var tvN2 = transSum(muts, G, T, C, A);

        //Tv total
        var tvT = [];
        tvT[0] = tvW[0] + tvS[0] + tvN1[0] + tvN2[0];
        tvT[2] = tvW[2] + tvS[2] + tvN1[2] + tvN2[2]; //Biename for variance.
        tvT[1] = Math.sqrt(tvT[2] / 4); // n =4

        //Ts/Tv
        var tt = [];
        tt[0] = tsT[0] / tvT[0];
        tt[2] = varRatio(tsT[0], tsT[2], tvT[0], tvT[2], 2); // Taylor w n =2
        tt[1] = Math.sqrt(tt[2] / 2);

        //AT→GC
        var ws = [];
        ws[0] = muts[A][G] + muts[A][C] + muts[T][G] + muts[T][C];
        ws[2] = variance([muts[A][G], muts[T][C]]) + variance([muts[A][C], muts[T][G]]);
        ws[1] = Math.sqrt(ws[2] / 2);

        //GC→AT
        var sw = [];
        sw[0] = muts[G][A] + muts[G][T] + muts[C][A] + muts[C][T];
        sw[2] = variance([muts[G][A], muts[C][T]]) + variance([muts[G][T], muts[C][A]]);
        sw[1] = Math.sqrt(sw[2] / 2);

        //AT→GC/GC→AT
        var wssw = [];
        wssw[0] = ws[0] / sw[0];
        wssw[2] = varRatio(ws[0], ws[2], sw[0], sw[2], 2);
        wssw[1] = Math.sqrt(wssw[2] / 2);

        ////AT→GC/GC→AT
        var wssw = [];
        wssw[0] = ws[0] / sw[0];
        wssw[2] = varRatio(ws[0], ws[2], sw[0], sw[2], 2);
        wssw[1] = Math.sqrt(wssw[2] / 2);

        //A→N, T→N
        var wn = [];
        wn[0] = muts[A][T] + muts[A][G] + muts[A][C] + muts[T][A] + muts[T][G] + muts[T][C];
        wn[2] = qV(muts, A, T) + qV(muts, A, G) + qV(muts, A, C) + qV(muts, T, A) + qV(muts, T, G) + qV(muts, T, C);
        wn[1] = Math.sqrt(wn[2] / 6);

        //G→N, C→N
        var sn = [];
        sn[0] = muts[G][A] + muts[G][T] + muts[G][C] + muts[C][A] + muts[C][G] + muts[C][T];
        sn[2] = qV(muts, G, A) + qV(muts, G, T) + qV(muts, G, C) + qV(muts, C, A) + qV(muts, C, G) + qV(muts, C, T);
        sn[1] = Math.sqrt(wn[2] / 6);

        var fancy = document.getElementById("fancy").rows;
        fancy[1].cells[1].innerHTML = rd(tt[0]);
        fancy[1].cells[2].innerHTML = rd(tt[1]);
        fancy[2].cells[1].innerHTML = rd(wssw[0]);
        fancy[2].cells[2].innerHTML = rd(wssw[1]);
        fancy[3].cells[1].innerHTML = rd(wn[0]) + " &#37;";
        fancy[3].cells[2].innerHTML = rd(wn[1]) + " &#37;";
        fancy[4].cells[1].innerHTML = rd(sn[0]) + " &#37;";
        fancy[4].cells[2].innerHTML = rd(sn[1]) + " &#37;";
        fancy[5].cells[1].innerHTML = rd(ws[0]) + " &#37;";
        fancy[5].cells[2].innerHTML = rd(ws[1]) + " &#37;";
        fancy[6].cells[1].innerHTML = rd(sw[0]) + " &#37;";
        fancy[6].cells[2].innerHTML = rd(sw[1]) + " &#37;";
        fancy[7].cells[1].innerHTML = rd(tsT[0]) + " &#37;";
        fancy[7].cells[2].innerHTML = rd(tsT[1]) + " &#37;";
        fancy[8].cells[1].innerHTML = rd(ts1[0]) + " &#37;";
        fancy[8].cells[2].innerHTML = rd(ts1[1]) + " &#37;";
        fancy[9].cells[1].innerHTML = rd(ts2[0]) + " &#37;";
        fancy[9].cells[2].innerHTML = rd(ts2[1]) + " &#37;";
        fancy[10].cells[1].innerHTML = rd(tvT[0]) + " &#37;";
        fancy[10].cells[2].innerHTML = rd(tvT[1]) + " &#37;";
        fancy[11].cells[1].innerHTML = rd(tvW[0]) + " &#37;";
        fancy[11].cells[2].innerHTML = rd(tvW[1]) + " &#37;";
        fancy[12].cells[1].innerHTML = rd(tvN1[0]) + " &#37;";
        fancy[12].cells[2].innerHTML = rd(tvN1[1]) + " &#37;";
        fancy[13].cells[1].innerHTML = rd(tvS[0]) + " &#37;";
        fancy[13].cells[2].innerHTML = rd(tvS[1]) + " &#37;";
        fancy[14].cells[1].innerHTML = rd(tvN2[0]) + " &#37;";
        fancy[14].cells[2].innerHTML = rd(tvN2[1]) + " &#37;";
    }


</script>
</body>
</html>


